参考：https://www.liaoxuefeng.com/wiki/896043488029600

Git：
user.name：mpgit0505
user.email：2351797655@qq.com

创建：
 cd D:/GitFlies
 mkdir learngit
 cd learngit
 pwd
 -----
 $ cd ..\
注意 cd 后面有空格
然后就会弹出一个
>
直接回车返回上一级目录

test01测试，vi进行编辑文件；按ESC退出状态时连按灵犀大写字母Z

'''
修改本地后推到远程库：
git status
git add gitNote.txt
git commit -m“change something”
git push origin master
从已有的远程库拉取：
git clone git@github.com:mpgit0505/Mygit

'''

工作区（working tree），暂存区（index /stage），本地仓库（repository）
git跟不同的参数，比较不同的区间的版本。
git diff：是查看working tree与index的差别的。
git diff --cached：是查看index与repository的差别的。
git diff HEAD：是查看working tree和repository的差别的。其中：HEAD代表的是最近的一次commit的信息。
  综上所述：git diff 后面跟文件名称是是查看工作区（working tree）与暂存区（index）的差别的。
  
  
  
 Git管理的文件分为：工作区，版本库，版本库又分为暂存区stage和暂存区分支master(仓库)
工作区>>>>暂存区>>>>仓库
cat readme.txt 查看文件内容
git add把文件从工作区>>>>暂存区，git commit把文件从暂存区>>>>仓库， git add readme.txt把文件添加到仓库：
git diff查看工作区和暂存区差异，
git diff --cached查看暂存区和仓库差异，
git diff HEAD 查看工作区和仓库的差异，
git add的反向命令git checkout，撤销工作区修改，即把暂存区最新版本转移到工作区，
git commit的反向命令git reset HEAD，就是把仓库最新版本转移到暂存区。
$ git commit -m“change something”	git commit告诉Git，把文件提交到仓库


rm test.txt 或者直接在文件管理器中把没用的文件删了；git status命令会立刻告诉你哪些文件被删除了
A.确实要从版本库中删除该文件，那就用命令git rm 文件名 删掉，并且git commit
B.另一种情况是删错了，但版本库里还有呢，所以还可以把误删的文件恢复到最新版本：git checkout -- test.txt
** 注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！


GitHub：远程仓库
Username：mpgit0505
1、创建SSH Key:
	使用命令： ls -al ~/.ssh
	使用命令： ssh-keygen -t rsa -C “mpgit0505”，mpgit0505换成github用户名，按三次回车（使用默认设置）
	查看生成的key：cat ~/.ssh/id_rsa.pub

2、设置SSH Key的秘钥
	登陆GitHub，点击头像“settings”，“SSH Keys”页面：然后，点“SSH and key” ->"New SHH key"，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：(以ssh-rsa开始的)	（GitHub允许你添加多个Key。假定你有若干电脑，既要在公司提交，又在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。）

3、添加远程库
	GitHub上创建Git仓库repository，点击右上角 +号->NEW repository-> Repository name：Mygit（库名字）其他保持默认就可以
	然后在本地的GitFiles仓库下运行命令：
		$ git remote add origin git@github.com:mpgit0505/Mygit.git  (mpgit0505 换成自己的GitHub账户名)
	添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的
	添加时git报错：'fatal:remote origin already exists'怎么处理？
		1、先删除：
			$ git remote rm origin
		2、再次执行添加就可以了。
	下一步，就可以把本地库的所有内容master分支推送到远程库上：
		$ git push -u origin master
	'''
		第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
		The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
		RSA key fingerprint is xx.xx.xx.xx.xx.
		Are you sure you want to continue connecting (yes/no)?	这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
		
		把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。		由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
	'''
	推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样
	只要本地作了提交，就可以通过命令：
		$ git push origin master
	把本地master分支的最新修改推送至GitHub

从远程克隆
	1、登录GitHub创建一个仓库，名字叫 gitskills
		创建的时候勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件
	2、用命令git clone克隆一个本地库：
		$ git clone git@github.com:mpgit0505/gitskills.git
		'''
			执行后报一下错误：有可能网络问题，在执行一次，包括push的时候
			Connection reset by 52.74.223.119 port 22
			fatal: Could not read from remote repository.
			Please make sure you have the correct access rights
			and the repository exists.

		'''
	注意把Git库的地址换成你自己的，然后进入gitskills目录看看，已经有README.md文件了：
		$ cd gitskills
		$ ls
		README.md
		
Git支持多种协议，包括https，但ssh协议速度最快。


分支管理
	创建与合并分支
	首先，我们创建dev分支，然后切换到dev分支：
		$ git checkout -b dev
		Switched to a new branch 'dev'
	git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
		$ git branch dev
		$ git checkout dev
		Switched to branch 'dev'
	然后，用git branch命令查看当前分支；git branch命令会列出所有分支，当前分支前面会标一个*号
		$ git branch
		* dev
		  master
	然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：Creating a new branch is quick.然后提交：
		$ git add readme.txt 
		$ git commit -m "branch test"
	现在，dev分支的工作完成，我们就可以切换回master分支：
		$ git checkout master
		Switched to branch 'master'	切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：
	现在，我们把dev分支的工作成果合并到master分支上：
		$ git merge dev
		Updating d46f35e..b17d20e
		Fast-forward
		readme.txt | 1 +
		1 file changed, 1 insertion(+)	gitmerge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。
	合并完成后，就可以放心地删除dev分支了：
		$ git branch -d dev
	删除后，查看branch，就只剩下master分支了：
		$ git branch
		* master
	实际上，切换分支这个动作，用switch更科学。因此，最新版本的Git提供了新的git switch命令来切换分支：
	创建并切换到新的dev分支，可以使用：
		$ git switch -c dev
	直接切换到已有的master分支，可以使用：
		$ git switch master
小结：
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>或者git switch <name>
创建+切换分支：git checkout -b <name>或者git switch -c <name>
合并某分支到当前分支：git merge <某分支name>
删除分支：git branch -d <name>
	解决冲突：
		1、创建分支dev 修改后 git add commit提交之后切到master分支不做merge命令合并
		2、切换到master之后在同一个文件做不同的修改， git add commit提交后，现在dev和master都有新的提交，Git无法执行merge“快速合并”
		cat readme.txt 查看文件内容。Git会标记处不同分支的内容，我们做最终修改，在提交
			$ git add readme.txt 
			$ git commit -m "conflict fixed"
			[master cf810e4] conflict fixed
		最后，删除feature1分支：$ git branch -d feature1	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
		用git log --graph命令可以看到分支合并图。

分支管理策略：普通模式合并
	准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
		$ git merge --no-ff -m "merge with no-ff" dev
	因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
	合并后，我们用git log看看分支历史：
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
	
Feature分支
	1、首先，我们创建dev分支，然后切换到dev分支：
		$ git checkout -b dev
	现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。于是准备开发：
	2、创建Feature分支：
		$ git switch -c feature-vulcan
	3、开发完后开始提交：
		$ git add vulcan.py
		$ git status
		$ git commit -m "add feature vulcan"
	4、切回dev，准备合并：
		git checkout dev
		git merge dev
	5、如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。没执行合并时执行：
		$ git branch -d feature-vulcan  会看到：
		error: The branch 'feature-vulcan' is not fully merged.
		If you are sure you want to delete it, run 'git branch -D feature-vulcan'.		销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数。。
		现在我们强行删除：
			$ git branch -D feature-vulcan
		Deleted branch feature-vulcan (was 287773e).终于删除成功！

多人协作
	推送分支
		要查看远程库的信息，用git remote，或者，用git remote -v显示更详细的信息：：
			$ git remote
			$ git push origin master 推送分支，就是把该分支上的所有本地提交推送到远程库如果要推送其他分支，比如dev，就改成：
			$ git push origin dev
		master分支是主分支，因此要时刻与远程同步；
		dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
		bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
		feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
	多人协作的工作模式通常是这样：
		首先，可以试图用git push origin <branch-name>推送自己的修改；
		如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
		如果合并有冲突，则解决冲突，并在本地提交；
		没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
		如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
		这就是多人协作的工作模式，一旦熟悉了，就非常简单。


标签管理
	创建标签
		在Git中打标签非常简单，首先，切换到需要打标签的分支上：
			$ git branch
			  git checkout master
		然后，敲命令git tag <name>就可以打一个新标签：
			$ git tag v1.0
		可以用命令git tag查看所有标签：
			$ git tag
		默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
		方法是找到历史提交的commit id，然后打上就可以了：
			$ git log --pretty=oneline --abbrev-commit
		根据对应的commit id比如是f52c633，敲入命令：
			$ git tag v0.9 f52c633
		标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息
		还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
			$ git tag -a v0.1 -m "version 0.1 released" 1094adb
		如果标签打错了，也可以删除：
			$ git tag -d v0.1
		因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
		如果要推送某个标签到远程，使用命令git push origin <tagname>：
			$ git push origin v1.0
		或者，一次性推送全部尚未推送到远程的本地标签：
			$ git push origin --tags
		如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
			$ git tag -d v0.9
		然后，从远程删除。删除命令也是push，但是格式如下：
			$ git push origin :refs/tags/v0.9
			
配置别名：
	我们只需要敲一行命令，告诉Git，以后st就表示status：
		$ git config --global alias.st status
	好了，现在敲git st看看效果。
	当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：
		$ git config --global alias.co checkout
		$ git config --global alias.ci commit
		$ git config --global alias.br branch
	以后提交就可以简写成：
		$ git ci -m "bala bala bala..."
	--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。































